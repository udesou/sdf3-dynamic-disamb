Ambiguity 1: 
parse_comparable_data ctxt tk k >>=? fun k ->
                 parse_data ctxt tv v >>=? fun v ->
                 return (map_update k (Some v) acc)

Ambiguity 2: 
check_item (unsigned_int_kind kl) loc "XOR" 1 2 >>=? fun (Eq _) ->
        check_item (int_kind_eq kl kr) loc "XOR" 1 2 >>=? fun (Eq _) ->
        return (typed loc (Xor_int kl, Item_t (Int_t kl, rest)))

Ambiguity 3: 
(Lwt.return (parse_comparable_ty tk)) >>=? fun (Ex_comparable_ty tk) ->
        (Lwt.return (parse_ty tv)) >>=? fun (Ex_ty tv) ->
        return (typed loc (Empty_map (tk, tv), Item_t (Map_t (tk, tv), stack)))

Ambiguity 4: 
check_item_ty gp gr loc "CREATE_CONTRACT" 5 6 >>=? fun (Eq _) ->
        check_item_ty ginit gp loc "CREATE_CONTRACT" 6 6 >>=? fun (Eq _) ->
        return (typed loc (Create_contract (gp, p, r),
                           Item_t (Contract_t (p, r), rest)))

Ambiguity 5: 
parse_comparable_ty uta >>? fun (Ex_comparable_ty ta) ->
      parse_ty utr >>? fun (Ex_ty tr) ->
      ok (Ex_ty (Map_t (ta, tr)))

Ambiguity 6: 
check_item_ty r pr loc "REDUCE" 1 3 >>=? fun (Eq _) ->
        check_item_ty elt pelt loc "REDUCE" 2 3 >>=? fun (Eq _) ->
        check_item_ty init r loc "REDUCE" 3 3 >>=? fun (Eq _) ->
        return (typed loc (Set_reduce, Item_t (r, rest)))

Ambiguity 7: 
check_item_ty vk k loc "UPDATE" 1 3 >>=? fun (Eq _) ->
        check_item_ty vv v loc "UPDATE" 2 3 >>=? fun (Eq _) ->
        return (typed loc (Map_update, Item_t (Map_t (ck, v), rest)))

Ambiguity 8: 
check_item (unsigned_int_kind kl) loc "AND" 1 2 >>=? fun (Eq _) ->
        check_item (int_kind_eq kl kr) loc "AND" 1 2 >>=? fun (Eq _) ->
        return (typed loc (And_int kl, Item_t (Int_t kl, rest)))

Ambiguity 9: 
parse_ty uta >>? fun (Ex_ty ta) ->
      parse_ty utr >>? fun (Ex_ty tr) ->
      ok (Ex_ty (Lambda_t (ta, tr)))

Ambiguity 10: 
check_kind [ Seq_kind ] bt >>=? fun () ->
        check_kind [ Seq_kind ] bf >>=? fun () ->
        parse_instr ?storage_type ctxt bt rest >>=? fun btr ->
        parse_instr ?storage_type ctxt bf rest >>=? fun bfr ->
        let branch ibt ibf =
          { loc ; instr = If (ibt, ibf) ; bef ; aft = ibt.aft } in
        merge_branches loc btr bfr { branch }

Ambiguity 11: 
parse_ty utl >>? fun (Ex_ty tl) ->
      parse_ty utr >>? fun (Ex_ty tr) ->
      ok (Ex_ty (Contract_t (tl, tr)))

Ambiguity 12: 
check_kind [ Seq_kind ] bt >>=? fun () ->
        check_kind [ Seq_kind ] bf >>=? fun () ->
        parse_instr ?storage_type ctxt bt rest >>=? fun btr ->
        parse_instr ?storage_type ctxt bf (Item_t (t, rest)) >>=? fun bfr ->
        let branch ibt ibf =
          { loc ; instr = If_none (ibt, ibf) ; bef ; aft = ibt.aft } in
        merge_branches loc btr bfr { branch }

Ambiguity 13: 
check_item_ty pk k loc "REDUCE" 2 3 >>=? fun (Eq _) ->
        check_item_ty pv v loc "REDUCE" 2 3 >>=? fun (Eq _) ->
        check_item_ty r pr loc "REDUCE" 1 3 >>=? fun (Eq _) ->
        check_item_ty init r loc "REDUCE" 3 3 >>=? fun (Eq _) ->
        return (typed loc (Map_reduce, Item_t (r, rest)))

Ambiguity 14: 
(Lwt.return (parse_ty t)) >>=? fun (Ex_ty t) ->
        parse_data ctxt t d >>=? fun v ->
        return (typed loc (Const v, Item_t (t, stack)))

Ambiguity 15: 
(Lwt.return (parse_ty ta)) >>=? fun (Ex_ty ta) ->
        (Lwt.return (parse_ty tb)) >>=? fun (Ex_ty tb) ->
        return (typed loc (Source (ta, tb), Item_t (Contract_t (ta, tb), stack)))

Ambiguity 16: 
(Lwt.return (comparable_ty_of_ty loc ret)) >>=? fun ret ->
        check_item_ty elt param loc "MAP" 1 2 >>=? fun (Eq _) ->
        return (typed loc (Set_map ret, Item_t (Set_t ret, rest)))

Ambiguity 17: 
trace
      (Ill_formed_type (None, exp_ty))
      (Lwt.return (parse_ty exp_ty)) >>=? fun (Ex_ty exp_ty) ->
    trace
      (Ill_typed_data (None, data, exp_ty))
      (parse_data ctxt exp_ty data) >>=? fun _ ->
    return ()

Ambiguity 18: 
traced @@
        (Lwt.return (Contract.of_b58check s)) >>=? fun c ->
        parse_contract ctxt ty1 ty2 loc c >>=? fun _ ->
        return (ty1, ty2, c)

Ambiguity 19: 
ty_eq tva tvb |>
      record_trace (Bad_stack_item lvl) >>? fun  (Eq _) ->
      stack_ty_eq (lvl + 1) ra rb >>? fun (Eq _) ->
      (eq ta tb : (ta stack_ty, tb stack_ty) eq tzresult)

Ambiguity 20: 
parse_ty utl >>? fun (Ex_ty tl) ->
      parse_ty utr >>? fun (Ex_ty tr) ->
      ok (Ex_ty (Union_t (tl, tr)))

Ambiguity 21: 
Contract.exists ctxt contract >>=? function
    | false -> fail (Invalid_contract (loc, contract))
    | true ->
        trace
          (Invalid_contract (loc, contract)) @@
        Contract.get_script ctxt contract >>=? function
        | None ->
            Lwt.return
              (ty_eq arg Unit_t >>? fun (Eq _) ->
               ty_eq ret Unit_t >>? fun (Eq _) ->
               let contract : (arg, ret) typed_contract =
                 (arg, ret, contract) in
               ok contract)
        | Some { code = { arg_type; ret_type} } ->
            Lwt.return
              (parse_ty arg_type >>? fun (Ex_ty targ) ->
               parse_ty ret_type >>? fun (Ex_ty tret) ->
               ty_eq targ arg >>? fun (Eq _) ->
               ty_eq tret ret >>? fun (Eq _) ->
               let contract : (arg, ret) typed_contract =
                 (arg, ret, contract) in
               ok contract)

Ambiguity 22: 
check_item_ty pk k loc "MAP" 1 2 >>=? fun (Eq _) ->
        check_item_ty pv v loc "MAP" 1 2 >>=? fun (Eq _) ->
        return (typed loc (Map_map, Item_t (Map_t (ck, ret), rest)))

Ambiguity 23: 
(Lwt.return (parse_ty arg)) >>=? fun (Ex_ty arg) ->
        (Lwt.return (parse_ty ret)) >>=? fun (Ex_ty ret) ->
        check_kind [ Seq_kind ] code >>=? fun () ->
        parse_lambda ctxt arg ret code >>=? fun lambda ->
        return (typed loc (Lambda lambda, Item_t (Lambda_t (arg, ret), stack)))

Ambiguity 24: 
trace
      (Ill_formed_type (Some "parameter", arg_type))
      (Lwt.return (parse_ty arg_type)) >>=? fun (Ex_ty arg_type) ->
    trace
      (Ill_formed_type (Some "return", ret_type))
      (Lwt.return (parse_ty ret_type)) >>=? fun (Ex_ty ret_type) ->
    trace
      (Ill_formed_type (Some "storage", storage_type))
      (Lwt.return (parse_ty storage_type)) >>=? fun (Ex_ty storage_type) ->
    let arg_type_full = Pair_t (Pair_t (Tez_t, arg_type), storage_type) in
    let ret_type_full = Pair_t (ret_type, storage_type) in
    trace
      (Ill_typed_contract (code, arg_type, ret_type, storage_type))
      (parse_lambda ctxt
         ~storage_type arg_type_full ret_type_full
         code) >>=? fun (Lam (descr,_)) ->
    return (type_map descr)

Ambiguity 25: 
check_item_ty r pr loc "REDUCE" 1 3 >>=? fun (Eq _) ->
        check_item_ty elt pelt loc "REDUCE" 2 3 >>=? fun (Eq _) ->
        check_item_ty init r loc "REDUCE" 3 3 >>=? fun (Eq _) ->
        return (typed loc (List_reduce, Item_t (r, rest)))

Ambiguity 26: 
(Lwt.return (parse_ty arg_type)) >>=? fun (Ex_ty arg_type) ->
    (Lwt.return (parse_ty ret_type)) >>=? fun (Ex_ty ret_type) ->
    (Lwt.return (parse_ty storage_type)) >>=? fun (Ex_ty storage_type) ->
    let arg_type_full = Pair_t (Pair_t (Tez_t, arg_type), storage_type) in
    let ret_type_full = Pair_t (ret_type, storage_type) in
    parse_data ctxt storage_type storage >>=? fun storage ->
    parse_lambda ctxt ~storage_type arg_type_full ret_type_full code >>=? fun code ->
    return (Ex_script { code; arg_type; ret_type; storage; storage_type })

Ambiguity 27: 
check_kind [ Seq_kind ] bt >>=? fun () ->
        check_kind [ Seq_kind ] bf >>=? fun () ->
        parse_instr ?storage_type ctxt bt (Item_t (tl, rest)) >>=? fun btr ->
        parse_instr ?storage_type ctxt bf (Item_t (tr, rest)) >>=? fun bfr ->
        let branch ibt ibf =
          { loc ; instr = If_left (ibt, ibf) ; bef ; aft = ibt.aft } in
        merge_branches loc btr bfr { branch }

Ambiguity 28: 
check_kind [ Seq_kind ] code >>=? fun () ->
        parse_instr ctxt code rest >>=? begin function
          | Typed descr ->
              return (typed loc (Dip descr, Item_t (v, descr.aft)))
          | Failed _ ->
              fail (Fail_not_in_tail_position loc)
        end

Ambiguity 29: 
parse_ty utl >>? fun (Ex_ty tl) ->
      parse_ty utr >>? fun (Ex_ty tr) ->
      ok (Ex_ty (Pair_t (tl, tr)))

Ambiguity 30: 
traced @@
        parse_data ctxt ta va >>=? fun va ->
        parse_data ctxt tb vb >>=? fun vb ->
        return (va, vb)

Ambiguity 31: 
check_kind [ Seq_kind ] body >>=? fun () ->
        parse_instr ?storage_type ctxt body rest >>=? begin function
          | Typed ibody ->
              trace
                (Unmatched_branches (loc, ibody.aft, stack))
                (Lwt.return (stack_ty_eq 1 ibody.aft stack)) >>=? fun (Eq _) ->
              return (typed loc (Loop ibody, rest))
          | Failed { descr } ->
              let ibody = descr (Item_t (Bool_t, rest)) in
              return (typed loc (Loop ibody, rest))
        end

Ambiguity 32: 
check_kind [ Seq_kind ] bt >>=? fun () ->
        check_kind [ Seq_kind ] bf >>=? fun () ->
        parse_instr ?storage_type ctxt bt (Item_t (t, Item_t (List_t t, rest))) >>=? fun btr ->
        parse_instr ?storage_type ctxt bf rest >>=? fun bfr ->
        let branch ibt ibf =
          { loc ; instr = If_cons (ibt, ibf) ; bef ; aft = ibt.aft } in
        merge_branches loc btr bfr { branch }

Ambiguity 33: 
ty_eq tal tbl >>? fun (Eq _) ->
         ty_eq tar tbr >>? fun (Eq _) ->
         (eq ta tb : (ta ty, tb ty) eq tzresult)

Ambiguity 34: 
check_item (unsigned_int_kind kl) loc "OR" 1 2 >>=? fun (Eq _) ->
        check_item (int_kind_eq kl kr) loc "OR" 1 2 >>=? fun (Eq _) ->
        return (typed loc (Or_int kl, Item_t (Int_t kl, rest)))

Ambiguity 35: 
comparable_ty_eq tal tbl >>? fun (Eq _) ->
         ty_eq tar tbr >>? fun (Eq _) ->
         (eq ta tb : (ta ty, tb ty) eq tzresult)