module Expressions

imports
  Lexical
  Names
  TypeExpr
  Patterns
  Extensions
  ModuleExpressions
  Classes
  TypesAndExceptions
  
context-free syntax
  
  Expr.Prefix = PrefixSymbol Expr
  Expr.Field  = Expr "." Ident 
  Expr.DotBracket1 = Expr "." "(" Expr ")"
  Expr.DotBracket2 = Expr "." "[" Expr "]"
  Expr.DotBracket3 = Expr "." "{" Expr "}"
  Expr.Hash        = Expr "#" MethodName
  Expr.FunctionApp = Expr   Arg+ {nlm, non-assoc}
//  Expr.ConstrExp   = Constr Expr
//  Expr.PolyVariant = "`" TagName Expr
  Expr.Lazy        = "lazy" Expr
  Expr.Assert      = "assert" Expr
  Expr.UnaryMinus  = "-" Expr
  Expr.FUnaryMinus = "-." Expr
  Expr.Infix1      = Expr InfixSymbol1 Expr {right}
  Expr.Infix2      = Expr InfixSymbol2 Expr {left}
  Expr.Infix3      = Expr InfixSymbol3 Expr {left}
  Expr.ColonColon  = Expr "::" Expr {right}
  Expr.Infix4      = Expr InfixSymbol4 Expr {right}
  Expr.Infix5      = Expr InfixSymbol5 Expr {left}
  Expr.Uneq        = Expr "!=" Expr {left}
  Expr.Infix6      = Expr InfixSymbol6 Expr {right}
  Expr.Infix7      = Expr InfixSymbol7 Expr {right}
  Expr.Comma       = Expr "," {Expr ","}+ {non-assoc}
  Expr.Assign1     = Expr "." Field "<-" Expr {right}
  Expr.Assign2     = Expr "." "(" Expr ")" "<-" Expr {right}
  Expr.Assign3     = Expr "." "[" Expr "]" "<-" Expr {right}
  Expr.Assign4     = Expr "." "{" Expr "}" "<-" Expr {right}
  Expr.Assign5     = InstVarName "<-" Expr
  Expr.Infix8      = Expr InfixSymbol8 Expr {right}
  Expr.IfThenElse  = "if" Expr "then" Expr "else" Expr
  Expr.IfThen      = "if" Expr "then" Expr
  Expr.SemiColon   = Expr ";"
  Expr.Sep         = Expr ";" Expr {right}
  Expr.Match       = "match" Expr "with" PatternMatching
  Expr.Function    = "function" PatternMatching
  Expr.Fun         = "fun" MultipleMatching
  Expr.TryBlock    = "try" Expr "with" PatternMatching
  Expr.Let         = "let" {LetBinding "and"}+ "in" Expr
  Expr.LetRec      = "let" "rec" {LetBinding "and"}+ "in" Expr
  Expr.LetModule   = "let" "module" ModuleName "=" ModuleExpr "in" Expr
  Expr             = "(" Expr ")" {bracket}
  Expr             = "begin" Expr "end" {bracket}
  Expr.Brackets1   = "(" Expr ":" TypeExpr ")"
  Expr.Brackets2   = "(" Expr ":>" TypeExpr ")"
  Expr.Brackets3   = "(" Expr ":" TypeExpr ":>" TypeExpr ")"
  Expr.Brackets4   = "{<" {AssignInstVarName ";"}+  SemiColon? ">}"
  AssignInstVarName.Assign = InstVarName "=" Expr
  Expr.Tuple       = "[" {Expr ";"}+ SemiColon? "]"
  Expr.Array       = "[|" {Expr ";"}+ SemiColon? "|]"
  Expr.Record1     = "{" {FieldAssign ";"}+ SemiColon? "}"
  FieldAssign.FieldAssign = Field "=" Expr
  FieldAssign.Field = Field
  Expr.Record2     = "{" Expr "with" {FieldAssign ";"}+ SemiColon? "}"
  Expr.While       = "while" Expr "do" Expr "done"
  Expr.For         = "for" Ident "=" Expr ToDownTo Expr "do" Expr "done"
  Expr.New         = "new" ClassPath
  Expr.Object      = "object" ClassBody "end"
  Expr.ModuleExpr  = "(" "module" ModuleExpr ColonPackageTypeOpt ")"
//  Expr.ValuePath   = ValuePath
  Expr             = ValueName
  Expr.Constant    = Constant
  Expr             = ConstrName
  
  Arg               = Expr 
  Arg.Label         = Label
  Arg.LabelColon    = LabelColon Expr
  Arg.OptLabel      = OptLabel
  Arg.OptLabelColon = OptLabelColon Expr
  
  PatternMatching.PatternMatching = OptBar Pattern "->" Expr InnerPatternMatching* {nlm}
  PatternMatching.PatternMatching = OptBar Pattern "when" Expr "->" Expr InnerPatternMatching* {nlm}
  InnerPatternMatching.InnerPatternMatching = "|" Pattern "->" Expr
  InnerPatternMatching.InnerPatternMatching = "|" Pattern "when" Expr "->" Expr
  
  LetBinding.LetBinding     = Pattern Parameter* "=" Expr
  LetBinding.LetBinding1    = Pattern Parameter* ":" PolyTypeExpr ":>" TypeExpr "=" Expr
  LetBinding.LetBinding2    = Pattern Parameter* ":" PolyTypeExpr "=" Expr
  LetBinding.LetBinding3    = Pattern Parameter* ":>" TypeExpr  "=" Expr
  LetBinding.BindingNew     = ValueName ":" "type" TypeConstr* "." TypeExpr "=" Expr
  
  MultipleMatching.MultipleMatching = Parameter+ "->" Expr
  MultipleMatching.MultipleMatching = Parameter+ "when" Expr "->" Expr
  
  Parameter.PatternParam    = Pattern
  Parameter.Param1          = Label
  Parameter.Param2          = "~" "(" LabelName ")"
  Parameter.Param2          = "~" "(" LabelName ":" TypeExpr ")"
  Parameter.Param3          = LabelColon Pattern
  Parameter.Param4          = OptLabel
  Parameter.Param5          = "?" "(" LabelName ColonTypeExprOpt ")"
  Parameter.Param5          = "?" "(" LabelName ColonTypeExprOpt "=" Expr ")"
  Parameter.Param6          = OptLabelColon Pattern
  Parameter.Param7          = OptLabelColon "(" Pattern ColonTypeExprOpt ")"
  Parameter.Param7          = OptLabelColon "(" Pattern ColonTypeExprOpt "=" Expr ")"
  Parameter.TypeParam       = "(" "type" TypeConstrName ")"
  

context-free priorities
    Expr.Prefix >
  { Expr.Field
    Expr.DotBracket1
    Expr.DotBracket2
    Expr.DotBracket3
  } >
    Expr.Hash >
  { non-assoc: Expr.FunctionApp
//    Expr.ConstrExp
//    Expr.PolyVariant
    Expr.Lazy
    Expr.Assert   
  } > 
  { Expr.UnaryMinus 
    Expr.FUnaryMinus
  } > 
    Expr.Infix1 >
    Expr.Infix2 >
    Expr.Infix3 >
    Expr.ColonColon >
    Expr.Infix4 >
    Expr.Infix5 >
    Expr.Uneq >
    Expr.Infix6 >
    Expr.Infix7 >
    Expr.Comma >
  { right: Expr.Assign1
    Expr.Assign2
    Expr.Assign3
    Expr.Assign4
    Expr.Assign5
  } > 
    Expr.Infix8 >
    Expr.IfThenElse > 
    Expr.IfThen >
    Expr.SemiColon > 
    Expr.Sep > 
  { Expr.Match 
    Expr.Function 
    Expr.TryBlock
    Expr.Fun
    Expr.Let
    Expr.LetRec
    Expr.LetModule
   },
   
  //tree filtering from Rascal Grammar  
  {Expr ","}+ = {Expr ","}+ "," Expr .> {Expr.SemiColon Expr.Comma Expr.Sep},
  {Expr ","}+ = Expr .> {Expr.SemiColon Expr.Comma Expr.Sep},
  {Expr ";"}+ = {Expr ";"}+ ";" Expr <2> . > {Expr.SemiColon Expr.Sep},
  {Expr ";"}+ = Expr <0>.> {Expr.SemiColon Expr.Sep},  
  Expr.FunctionApp <0>.> {Expr.SemiColon},
  FieldAssign.FieldAssign <2> .> {Expr.SemiColon Expr.Sep},
  Expr.Constant <0> .> Constant.Constr,
  Expr.Infix3 <0> .> Expr.SemiColon,
  Parameter.PatternParam  <0> .> Pattern.ConstrPattern,
  AssignInstVarName.Assign <2> .> {Expr.SemiColon Expr.Sep},
  
  Arg = Expr <0> .> 
  { Expr.FunctionApp
    Expr.Lazy
    Expr.Assert
    Expr.UnaryMinus  
    Expr.FUnaryMinus
    Expr.Infix1
    Expr.Infix2
    Expr.Infix3
    Expr.Infix4
    Expr.Infix5
    Expr.Infix6
    Expr.Infix7    
    Expr.Infix8
    Expr.Uneq
    Expr.IfThenElse
    Expr.IfThen
    Expr.Sep
    Expr.ColonColon
    Expr.SemiColon
    Expr.Comma
    Expr.Infix6
  },
  
  Arg.LabelColon <1> .> 
  { Expr.FunctionApp
    Expr.Lazy
    Expr.Assert
    Expr.UnaryMinus  
    Expr.FUnaryMinus
    Expr.Infix1
    Expr.Infix2
    Expr.Infix3
    Expr.Infix4
    Expr.Infix5
    Expr.Infix6
    Expr.Infix7    
    Expr.Infix8
    Expr.Uneq
    Expr.IfThenElse
    Expr.IfThen
    Expr.Sep
    Expr.ColonColon
    Expr.SemiColon
    Expr.Comma
    Expr.Infix6
  },
  Arg.OptLabelColon <1> .> 
  { Expr.FunctionApp
    Expr.Lazy
    Expr.Assert
    Expr.UnaryMinus  
    Expr.FUnaryMinus
    Expr.Infix1
    Expr.Infix2
    Expr.Infix3
    Expr.Infix4
    Expr.Infix5
    Expr.Infix6
    Expr.Infix7    
    Expr.Infix8
    Expr.Uneq
    Expr.IfThenElse
    Expr.IfThen
    Expr.Sep
    Expr.ColonColon
    Expr.SemiColon
    Expr.Comma
    Expr.Infix6
  }
  
lexical syntax

  UnMinus = "-"
//  UnMinus = "-."
  SemiColon = ";"
  SemiColon2 = ";"
  ToDownTo = "to"
  ToDownTo = "downto"
  
lexical restrictions
  UnMinus -/- [0-9]
  SemiColon2 -/- [\;]